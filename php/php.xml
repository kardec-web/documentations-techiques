<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.5 -->
<document ids="memo-php" names="memo\ -\ php" source="php.rst" title="Memo - PHP"><title>Memo - PHP</title><section ids="structure-de-base" names="structure\ de\ base"><title>Structure de base</title><section ids="balise" names="balise"><title>Balise</title><literal_block xml:space="preserve">code html
&lt;?php instruction php ; ?&gt;
code html</literal_block></section><section ids="commentaire" names="commentaire"><title>Commentaire</title><literal_block xml:space="preserve">// commentaire sur une ligne
# commentaire sur une ligne
/*
    commentaire sur plusieurs lignes
*/</literal_block></section><section ids="extension-de-fichier" names="extension\ de\ fichier"><title>Extension de fichier</title><block_quote><bullet_list bullet="+"><list_item><paragraph>.php    Pour les fichiers php pouvant être appelés.</paragraph></list_item><list_item><paragraph>.inc    Pour les fichiers d'inclusion qui ne peuvent être appelés directement. (ceci n'est qu'une convention)</paragraph></list_item></bullet_list></block_quote></section></section><section ids="op-rateur" names="opérateur"><title>Opérateur</title><literal_block xml:space="preserve">// Affectation par valeur
$variable = expression ;

// Affectation par référence
$variable = &amp;$variable2 ;

// Opérateurs arithmétiques
5 + 2 ;
++$var ; $var++ ; --$var ; ++$var ;

9 / 2 ; 9 % 2 ;

// Opérateur chaine
$Chaine.$chaine2.&quot;abc&quot;

// Opérateurs logiques
$a and $b ; $a &amp;&amp; $b ;
$a or $b ; $a || $b ;
$a xor $b ;
! $a ;

// Opérateurs combinés
$var += $var2 ;
$var -+ $var2 ;
$var *= $var2 ;
$var /= $var2 ;
$var .= $var2 ;</literal_block><section ids="inclussion-de-fichier" names="inclussion\ de\ fichier"><title>Inclussion de fichier</title><literal_block xml:space="preserve">// int include(fichier) ou int include &quot;fichier&quot;
// int include_once(fichier) ou int include_once 'fichier&quot;

// require(fichier)
// require_once(fichier)

// include renvoie 1 si le fichier à bien été inclus, en cas d'erreur affiche l'erreur et continue le script
// require ne renvoie rien, en cas d'erreur arrête le script
// include_once et require_once n'inclus le fichier qu'une fois même si appelé plusieurs fois

// dans php.ini la directive include-path définit des chemins de recherche pour l'inclusion de fichiers.</literal_block></section><section ids="redirection" names="redirection"><title>Redirection</title><literal_block xml:space="preserve">header(&quot;location: page.php&quot;) ;</literal_block></section><section ids="arr-t-d-un-srcipt" names="arrêt\ d'un\ srcipt"><title>Arrêt d'un srcipt</title><table><tgroup cols="2"><colspec colwidth="30"/><colspec colwidth="40"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>exit($message)</paragraph></entry><entry><paragraph>Interrompt brutalement le script,</paragraph></entry></row><row><entry><paragraph>exit([$statut])</paragraph></entry><entry><paragraph>affiche un message ou renvoie un</paragraph></entry></row><row><entry><paragraph>die($message)</paragraph></entry><entry><paragraph>entier compris entre 1 et 254 comme</paragraph></entry></row><row><entry><paragraph>die([$statut])</paragraph></entry><entry><paragraph>statut de fin.</paragraph></entry></row></tbody></tgroup></table></section></section><section ids="type" names="type"><title>Type</title><section ids="constante" names="constante"><title>Constante</title><literal_block xml:space="preserve">// boolean define( nom chaine, valeur) ;
// exemple :
   define(&quot;CONST&quot;, 5) ;
   echo CONST ;</literal_block></section><section ids="variable" names="variable"><title>Variable</title><literal_block xml:space="preserve">$ma_variable = 5 ;</literal_block></section><section ids="variable-fonction" names="variable\ -\ fonction"><title>Variable - fonction</title><table><tgroup cols="2"><colspec colwidth="30"/><colspec colwidth="40"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>boolean empty($variable)</paragraph></entry><entry><paragraph>Teste si une variable est vide</paragraph></entry></row><row><entry><paragraph>boolean isset($variable)</paragraph></entry><entry><paragraph>Teste si une variable est définie</paragraph></entry></row><row><entry><paragraph>unset($variable)</paragraph></entry><entry><paragraph>Supprime une variable</paragraph></entry></row><row><entry><paragraph>var_dump($variable)</paragraph></entry><entry><paragraph>Affiche les informations d'une variable</paragraph></entry></row><row><entry><paragraph>boolean is_array($variable)</paragraph></entry><entry><paragraph>Teste si la variable est un tableau</paragraph></entry></row><row><entry><paragraph>boolean is_bool($variable)</paragraph></entry><entry><paragraph>Teste si la variable est un booléen</paragraph></entry></row><row><entry><paragraph>boolean is_int($variable)</paragraph></entry><entry><paragraph>Teste si la valeur est un entier</paragraph></entry></row><row><entry><paragraph>boolean is_float($variable)</paragraph></entry><entry><paragraph>Teste si la variable est un nombre à ,</paragraph></entry></row><row><entry><paragraph>boolean is_objet($variable)</paragraph></entry><entry><paragraph>Teste si la variable est un objet</paragraph></entry></row><row><entry><paragraph>boolean is_string($variable)</paragraph></entry><entry><paragraph>Teste si la variable est un string</paragraph></entry></row><row><entry><paragraph>string strval($variable)</paragraph></entry><entry><paragraph>Transforme une variable en chaine</paragraph></entry></row><row><entry><paragraph>float floatval($variable)</paragraph></entry><entry><paragraph>Convertit une variable en float</paragraph></entry></row><row><entry><paragraph>int   intval($variable)</paragraph></entry><entry><paragraph>Convertit une variable en integer</paragraph></entry></row></tbody></tgroup></table></section><section ids="tableaux" names="tableaux"><title>Tableaux</title><literal_block xml:space="preserve">// Création
$tbl[] = 5 ;
$tbl['un'] = 1 ;
$tbl[6] = 7 ;
$tbl2 = array(1, 2, 3, '7', 'un'=&gt; 1) ;

// Accéder à un élément
$tbl[0] ;
$tbl['un'] ;

// Parcourir
foreach($tbl as $valeur)
 {
    print $valeur ;
 }

foreach($tbl as $cle =&gt; $valeur)
 {
    print $cle.&quot; &quot;.$valeur ;
    $tbl[$cle] = 0 ;
 }</literal_block></section><section ids="tableaux-fonction" names="tableaux\ -\ fonction"><title>Tableaux - fonction</title><table><tgroup cols="2"><colspec colwidth="33"/><colspec colwidth="74"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>int count($tbl)</paragraph></entry><entry><paragraph>Conte le nombre d'élément contenu dans le tableau</paragraph></entry></row><row><entry><paragraph>bool in_array($var, $tbl)</paragraph></entry><entry><paragraph>Teste si une valeur se trouve dans le tableau</paragraph></entry></row><row><entry><paragraph>bool array_key_exists($key, $tbl)</paragraph></entry><entry><paragraph>Teste si une clé est présente dans le tableau</paragraph></entry></row><row><entry><paragraph>mixte array_search($var, $tbl)</paragraph></entry><entry><paragraph>Cherche une valeur dans un tableau et renvoie sa clé</paragraph></entry></row><row><entry><paragraph>string implode($sep, $tbl)</paragraph></entry><entry><paragraph>Regroupe les valeurs d'un tableau dans une chaine à l'aide d'un séparateur</paragraph></entry></row><row><entry><paragraph>array explode($sep, string)</paragraph></entry><entry><paragraph>Découpe une chaine à l'aide d'un séparateur</paragraph></entry></row><row><entry><paragraph>array str_split($chaine, $nb)</paragraph></entry><entry><paragraph>Découpe une chaine en longueur de taille $nb</paragraph></entry></row></tbody></tgroup></table></section><section ids="string-fonction" names="string\ -\ fonction"><title>String - fonction</title><table><tgroup cols="2"><colspec colwidth="35"/><colspec colwidth="58"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>int strlen($chaine)</paragraph></entry><entry><paragraph>Retourne le nombre de caractère d'une chaine</paragraph></entry></row><row><entry><paragraph>string strtolower($chaine)</paragraph></entry><entry><paragraph>Convertit $chaine en minuscule</paragraph></entry></row><row><entry><paragraph>string strtoupper($chaine)</paragraph></entry><entry><paragraph>Convertit $chaine en majuscule</paragraph></entry></row><row><entry><paragraph>string ucfirst($chaine)</paragraph></entry><entry><paragraph>Convertit le premier caractère en majuscule</paragraph></entry></row><row><entry><paragraph>string ucwords($chaine)</paragraph></entry><entry><paragraph>Convertit le premier caractère de chaque mot en majuscule</paragraph></entry></row><row><entry><paragraph>int strcmp($src, $cib)</paragraph></entry><entry><paragraph>Compare les 2 chaines</paragraph></entry></row><row><entry><paragraph>int strcasecmp($src, $cib)</paragraph></entry><entry><paragraph>Compare les 2 chaines (sensible à la casse)</paragraph></entry></row><row><entry><paragraph>string [s]printf($chaine)</paragraph></entry><entry><paragraph>printf du c</paragraph></entry></row><row><entry><paragraph>string number_format($nb, $dec,</paragraph></entry><entry/></row><row><entry><paragraph>$sep, $sep_millier)</paragraph></entry><entry><paragraph>Met en forme un nombre</paragraph></entry></row><row><entry><paragraph>string ltrim($chaine)</paragraph></entry><entry><paragraph>Supprime les espaces en début de chaine</paragraph></entry></row><row><entry><paragraph>string rtrim($chaine)</paragraph></entry><entry><paragraph>Supprime les espaces en fin de chaine</paragraph></entry></row><row><entry><paragraph>string trim($chaine)</paragraph></entry><entry><paragraph>Supprime les espaces des deux côtés de la chaine</paragraph></entry></row><row><entry><paragraph>string substr($ch, $deb[,$long)</paragraph></entry><entry><paragraph>Extrait une sous-chaine d'une chaine</paragraph></entry></row><row><entry><paragraph>string str_repeat($chaine, $rep)</paragraph></entry><entry><paragraph>Crée une chaine de x répétition de $chaine</paragraph></entry></row><row><entry><paragraph>int strpos($chaine, $ch_recherche)</paragraph></entry><entry><paragraph>Recherche la position de la sous-chaine dans la chaine</paragraph></entry></row><row><entry><paragraph>string strstr($chaine, $ch_rech)</paragraph></entry><entry><paragraph>Extrait la sous-chaine commençant à partir d'une occurence</paragraph></entry></row><row><entry><paragraph>mixte str_replace($rech, $remp)</paragraph></entry><entry><paragraph>Remplacer les occurences d'une chaine par une autre chaine</paragraph></entry></row></tbody></tgroup></table></section><section ids="expressions-r-guli-res" names="expressions\ régulières"><title>Expressions régulières</title><table><tgroup cols="2"><colspec colwidth="39"/><colspec colwidth="40"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>int ereg($recherhe, $chaine,[$tbl])</paragraph></entry><entry><paragraph>Recherche s'il existe une correspondance</paragraph></entry></row><row><entry><paragraph>string ereg_replace($rech, $src, $sib)</paragraph></entry><entry><paragraph>Idem et remplace la chaine $sib</paragraph></entry></row></tbody></tgroup></table><literal_block xml:space="preserve">// Exemple expression régulière
$chaine = &quot;6-2-2008&quot; ;
$expr = &quot;([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$&quot; ;
if (ereg($expr, $chaine, $tbl_resultat))
 {
    // Remplacer - par /
    $chaine = ereg_replace(&quot;-&quot;, &quot;/&quot;, $chaine) ;
    echo $chaine.&quot;&lt;br /&gt;&quot; ;
    echo $tbl_resultat[1].&quot;&lt;br /&gt;&quot; ;
    echo $tbl_resultat[2].&quot;&lt;br /&gt;&quot; ;
    echo $tbl_resultat[3].&quot;&lt;br /&gt;&quot; ;
 }</literal_block></section><section ids="date" names="date"><title>Date</title><table><tgroup cols="2"><colspec colwidth="39"/><colspec colwidth="63"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>bool checkdate($mois, $jour, $annee)</paragraph></entry><entry><paragraph>Vérifie que les trois variables correspondent à une date valide</paragraph></entry></row></tbody></tgroup></table></section><section ids="conversion-explicite" names="conversion\ explicite"><title>Conversion explicite</title><literal_block xml:space="preserve">(int)&quot;5ab&quot; ; // -&gt; 5
(bool)0 ;
(float)&quot;1.5&quot; ;
(string)89 ;</literal_block></section></section><section ids="structure-de-contr-le" names="structure\ de\ contrôle"><title>Structure de contrôle</title><section ids="if" names="if"><title>if</title><literal_block xml:space="preserve">// Première syntaxe
if(condition)
 {
    instruction ;
 }
elseif(condition2)
 {
    instruction ;
 }
else
 {
    instruction ;
 }

 // Deuxième syntaxe
 if (condition) :
    instruction ;
 elseif (condition2) :
    instruction ;
 else :
    instruction ;
 endif ;

 // Utilisation
 &lt;html&gt;
    &lt;head&gt;&lt;title&gt;If 2&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
        &lt;?php if (empty($nom)) : ?&gt;
            Nom vide !&lt;br /&gt;
        &lt;?php elseif (empty($age)) : ?&gt;
            Nom rempli !&lt;br /&gt;
            Age vide !&lt;br /&gt;
        &lt;?php else : ?&gt;
            Nom rempli !&lt;br /&gt;
            Age rempli !&lt;br /&gt;
        &lt;?php endif ; ?&gt;
    &lt;/body&gt;
&lt;/html&gt;</literal_block></section><section ids="switch" names="switch"><title>Switch</title><literal_block xml:space="preserve">// Première syntaxe
switch (expression)
 {
    case expression :
        instruction ;
    [break ;]

    case expression2 :
        instruction ;
    [break ;]

    default :
        instruction ;
 }

// Deuxième syntaxe
switch (expression) :
 case expression :
    instruction ;
 [break ;]

 case expression2 :
    instruction ;
 [break ;]

 default :
    instruction ;
endswitch ;</literal_block></section><section ids="while" names="while"><title>While</title><literal_block xml:space="preserve">// Première syntax
while (condition)
 {
    instruction ;
 }

// deuxième syntax
while (condition) :
    instruction ;
endwhile ;</literal_block></section><section ids="do-while" names="do..while"><title>Do..while</title><literal_block xml:space="preserve">do
 {
    instruction ;
 }
while (expression) ;</literal_block></section><section ids="for" names="for"><title>For</title><literal_block xml:space="preserve">// Première syntax
for (i=0 ; i &gt;10 ; i++)
 {
    instruction ;
 }

// deuxième syntax
for (i=0 ; i &gt;10 ; i++) :
    instruction ;
endfor ;</literal_block></section><section ids="fonction" names="fonction"><title>Fonction</title><literal_block xml:space="preserve">function nom([parametres[=1]])
 {
    [static] $a = 1 ;
    instruction ;
    [return 1 ;]
 }

function produit($nb, $nb2)
 {
    return $nb*$nb2 ;
 }

function somme($nb, $nb2)
 {
    return $nb+$nb2 ;
 }

 function adaptater_calcul($operation, $nb, $nb2)
  {
    return $opération($nb, $nb2) ;
  }

 echo adapter_calcul(&quot;somme&quot;, 3, 5) ;
 echo adapter_calcul(&quot;produit&quot;, 3, 5) ;

 // Passage par référence
 function inverse(&amp;$a, &amp;$b)
  {
    $tmp = $a ;
    $a = $b ;
    $b = $tmp ;
  }

// Multi paramètre
function multi()
 {
    if(func_num_args()==0) return 0 ;

    $params = func_get_args() ;
    foreach($params as $param)
     {
        echo $param.'&lt;br&gt;'
     }
 }</literal_block><table><tgroup cols="2"><colspec colwidth="39"/><colspec colwidth="52"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>int func_num_args()</paragraph></entry><entry><paragraph>Renvoie le nombre d'arguments de la fonction</paragraph></entry></row><row><entry><paragraph>array func_get_args()</paragraph></entry><entry><paragraph>Renvoie un tableau avec les arguments de la fonction</paragraph></entry></row></tbody></tgroup></table></section><section ids="gestion-des-formulaires" names="gestion\ des\ formulaires"><title>Gestion des formulaires</title><definition_list><definition_list_item><term>Les données reçues d'un formulaire doivent être :</term><definition><bullet_list bullet="+"><list_item><paragraph>innitialisées si n'on existante (ou plutot les variables les recevant)</paragraph></list_item><list_item><paragraph>néttoyées des espaces blancs en début et en fin de chaine</paragraph></list_item><list_item><paragraph>éventuellement nétoyées des balises html</paragraph></list_item><list_item><paragraph>si magic_quotes_gpc est activé retiré les caractères d'échapements</paragraph></list_item></bullet_list></definition></definition_list_item><definition_list_item><term>Les données qui doivent être afficher dans un formulaire doivent être :</term><definition><bullet_list bullet="+"><list_item><paragraph>néttoyées pour que les caractères html spéciaux tels que les &gt; &lt; &quot; ' soit remplacé par leur équivalent html</paragraph></list_item></bullet_list></definition></definition_list_item><definition_list_item><term>Les données qui doivent être afficher dans une page web doivent être</term><definition><bullet_list bullet="+"><list_item><paragraph>néttoyées pour que les caractères html spéciaux tels que les &gt; &lt; &quot; ' soit remplacé par leur équivalent html</paragraph></list_item><list_item><paragraph>néttoyées pour que les caractères n soit remplacée par la balise &lt;br /&gt;</paragraph></list_item></bullet_list></definition></definition_list_item></definition_list><table><tgroup cols="2"><colspec colwidth="39"/><colspec colwidth="40"/><thead><row><entry><paragraph>Tableau</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>$_POST</paragraph></entry><entry><paragraph>Tableau contenant les valeurs d'un POST</paragraph></entry></row><row><entry><paragraph>$_GET</paragraph></entry><entry><paragraph>Tableau contenant les valeurs d'un GET</paragraph></entry></row></tbody></tgroup></table><table><tgroup cols="2"><colspec colwidth="43"/><colspec colwidth="148"/><thead><row><entry><paragraph>Fonction</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>import_request_variables($types, $préfixe)</paragraph></entry><entry><paragraph>Importe des données saisies dans un formulaire dans des variables préfixées par $préfixe suivit du nom (NAME), les types peuvent être P(POST) G(GET)</paragraph></entry></row><row><entry><paragraph>string addslashes(string)</paragraph></entry><entry><paragraph>Ajoute un antislash devant ' &quot; si magic_quotes_sybase est à off ou ' si à on</paragraph></entry></row><row><entry><paragraph>string stripslashes(string)</paragraph></entry><entry><paragraph>Inverse de addslashes</paragraph></entry></row><row><entry><paragraph>bool get_magic_quotes_gpc()</paragraph></entry><entry><paragraph>Retourne true si magic quote est activé</paragraph></entry></row><row><entry><paragraph>string htmlspecialchars(string[, option]]</paragraph></entry><entry><paragraph>Remplace les caractères &amp; &quot; &gt; &lt; en leur equivalent HTML, si option à ENT_QUOTES convertit en plus les '</paragraph></entry></row><row><entry><paragraph>string nl2br(string)</paragraph></entry><entry><paragraph>Remplace les n par des &lt;br /&gt;</paragraph></entry></row><row><entry><paragraph>string strip_tags(string)</paragraph></entry><entry><paragraph>Supprime les balises HTML</paragraph></entry></row></tbody></tgroup></table><table><tgroup cols="2"><colspec colwidth="39"/><colspec colwidth="121"/><thead><row><entry><paragraph>Directive(php.ini)</paragraph></entry><entry><paragraph>Description</paragraph></entry></row></thead><tbody><row><entry><paragraph>magic_quotes_gpc</paragraph></entry><entry><paragraph>Si à on, les données provenant d'une méthode GET, POST, COOKIE sont encodée avec un antislash devant les caractères ' &quot; </paragraph></entry></row><row><entry><paragraph>magic_quotes_sybase</paragraph></entry><entry><paragraph>Si à on double les ' plutôt que d'insérer un antislash</paragraph></entry></row></tbody></tgroup></table></section></section></document>